/* backup working version
"use client";

import { useEffect, useState, useRef } from "react"

const WIDTH = 800;
const HEIGHT = 800;
const CELL_SIZE = 50;
const NUM_ROWS = Math.floor(WIDTH / CELL_SIZE);
const NUM_COLS = Math.floor(HEIGHT / CELL_SIZE);

const colors = ["black", "red"];

type Board = number[][];
function createBoard(): Board {
  return Array.from( { length: NUM_ROWS }, () => new
Array(NUM_ROWS).fill(0)
);
}

export default function Home() {
  const initialBoard = createBoard();
  const board = createBoard();
  const [boardState, setBoardState] = useState<Board>(board)
  const [isplaying, setIsplaying] = useState(false);
  const canvasRef = useRef<null | HTMLCanvasElement>(null); // create a reference to the canvas element

  useEffect(() => {
    if (!isplaying) {
      return;
    }
    const inierval = setInterval(computNextBoard, 100);
    return () => clearInterval(inierval);
  }, [isplaying, computNextBoard]);

  useEffect(() => {
    if(canvasRef.current) {
      const ctx = canvasRef.current.getContext('2d');
      if(!ctx) return;

      ctx?.clearRect(0, 0, WIDTH, HEIGHT);
      ctx.strokeStyle = "gray";
      ctx.lineWidth = 0.1;

      for (let r = 0; r < NUM_ROWS; r++) {
        for (let c = 0; c < NUM_COLS; c++) {
          ctx.fillStyle = colors[boardState[r][c]];

          ctx.fillRect( // draw the cell
            Math.floor(WIDTH / NUM_ROWS) * r, 
            Math.floor(HEIGHT / NUM_COLS) * c, 
            CELL_SIZE, 
            CELL_SIZE
          );

          ctx.strokeRect( // draw the grid
            Math.floor(WIDTH / NUM_ROWS) * r, 
            Math.floor(HEIGHT / NUM_COLS) * c, 
            CELL_SIZE, 
            CELL_SIZE
          );
        }
      }
    }
  }, [boardState]); // empty array means that this effect will only run once
    
  function countNbores(r0: number, c0: number){
    let count = 0;
    for (let dr = -1; dr <= 1; ++dr) {
      for (let dc = -1; dc <= 1; ++dc) {
        if (dr != 0 || dc != 0) {
          const r = (r0 + dr + NUM_ROWS) % NUM_ROWS; // wrap around the board
          const c = (c0 + dc + NUM_COLS) % NUM_COLS; // wrap around the board

          if(boardState[r][c] === 1) {
            count++;
          }
        }
      }
    }
    return count;
  }


  function computNextBoard() {
    setBoardState((prevBoardState) => {
      const newBoard = prevBoardState.map((r) => [...r]);

      for (let r = 0; r < NUM_ROWS; r++) {
        for (let c = 0; c < NUM_COLS; c++) {
          const aliveCount = countNbores(r, c);
          if (prevBoardState[r][c] === 0) {
            if (aliveCount === 3) {
              newBoard[r][c] = 1;
            }
          } else {
            if (aliveCount !== 2 && aliveCount !== 3) {
              newBoard[r][c] = 0;
            }
          }
        }
      }
      return newBoard;
    });
  }

  function resetBoard() {
    //const board = createBoard();
    setBoardState(initialBoard);
  }

  return (
    <div>
      <h1 className="text-3x1 text-center font-mono mt-4">game of life</h1>
      
      <div className="flex justify-center flex-col items-center">
        <div className="flex space-x-3">
          <button 
          className="py-4" 
          onClick={computNextBoard}
          >
            Next
          </button>
          <button
          className="py-4"
          onClick={resetBoard}
          >
            Reset
          </button>
          <button
          className="py-4"
          onClick={() => setIsplaying(!isplaying)}
          >
            {isplaying ? "Stop" : "play"}
          </button>
        </div>
        <canvas 
          onClick={(e) => {
            const x = Math.floor(e.nativeEvent.offsetX / CELL_SIZE)
            const y = Math.floor(e.nativeEvent.offsetY / CELL_SIZE)

            const updatedBoardState = [...boardState];
            if(updatedBoardState[x][y] === 0) {
              updatedBoardState[x][y] = 1
            } else {
              updatedBoardState[x][y] = 0 
            }
            setBoardState(updatedBoardState);
          }}
          ref={canvasRef}
          width={WIDTH}
          height={HEIGHT}
          className="bg-gray-900"
          ></canvas>
      </div>
    
    </div>
  );
}
*/

